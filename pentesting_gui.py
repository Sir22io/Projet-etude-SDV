import tkinter as tk
from tkinter import scrolledtext
import subprocess
import os

RESULTS_DIR = "results"
LOG_FILE = "toolbox_log.txt"
REPORT_FILE = "final_report.txt"
os.makedirs(RESULTS_DIR, exist_ok=True)

# Fonction pour lancer l'outil
def run_tool(command, output_file, text_widget):
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        success_message = f"✅ Commande réussie : {command}. Résultat enregistré dans {RESULTS_DIR}/{output_file}\n"
        text_widget.insert(tk.END, success_message + result.stdout + "\n")
        with open(os.path.join(RESULTS_DIR, output_file), "w") as f:
            f.write(result.stdout)
    else:
        error_message = f"❌ Erreur lors de l'exécution : {command}. Voir {RESULTS_DIR}/{output_file} pour plus de détails.\n"
        text_widget.insert(tk.END, error_message + result.stderr + "\n")
        with open(os.path.join(RESULTS_DIR, output_file), "w") as f:
            f.write(result.stderr)

# Fonction pour créer l'interface graphique
def create_gui():
    window = tk.Tk()
    window.title("CyberSecurity Toolbox - Interface graphique")
    window.geometry("900x600")  # Taille de la fenêtre

    # Titre principal
    title_label = tk.Label(window, text="Voici l'interface graphique de la toolbox", font=("Helvetica", 16))
    title_label.pack(pady=20)

    # Frame pour les outils (colonne bleue)
    tools_frame = tk.Frame(window, bg="lightblue", width=200)
    tools_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10)

    # Zone de texte pour afficher les résultats
    result_text = scrolledtext.ScrolledText(window, width=60, height=20)
    result_text.pack(side=tk.LEFT, padx=20, pady=20)

    # Fonction pour gérer le clic sur un bouton d'outil
    def on_tool_click(tool_name, command, output_file):
        result_text.delete(1.0, tk.END)  # Effacer les anciens résultats
        run_tool(command, output_file, result_text)

    # Liste des outils à afficher
    tools = [
        ("Nmap", "nmap -sP 127.0.0.1", "nmap.txt", "Scan réseau pour découvrir les machines actives."),
        ("Nikto", "nikto -h http://testphp.vulnweb.com", "nikto.txt", "Scan de vulnérabilités de serveur web."),
        ("Gobuster", "gobuster dir -u http://testphp.vulnweb.com -w /usr/share/wordlists/dirb/common.txt", "gobuster.txt", "Scan de répertoires et fichiers cachés sur un site."),
        ("SQLMap", "sqlmap -u http://testphp.vulnweb.com --batch", "sqlmap.txt", "Test de vulnérabilités SQL injection."),
        ("WPScan", "wpscan --url http://testphp.vulnweb.com", "wpscan.txt", "Scan de vulnérabilités dans les sites WordPress."),
        ("Hydra", "hydra -l admin -P /usr/share/wordlists/rockyou.txt http://testphp.vulnweb.com http-get", "hydra.txt", "Brute force de mot de passe HTTP avec Hydra."),
        ("Commix", "commix -u http://testphp.vulnweb.com", "commix.txt", "Test d'injection de commandes avec Commix."),
        ("BurpSuite", "burpsuite", "burpsuite.txt", "Utilisation de Burp Suite pour l'analyse des vulnérabilités."),
        ("Arachni", "arachni http://testphp.vulnweb.com", "arachni.txt", "Scanner de vulnérabilités pour les applications Web.")
    ]

    # Créer un bouton pour chaque outil dans la colonne bleue
    for tool_name, command, output_file, description in tools:
        tool_button = tk.Button(tools_frame, text=tool_name, width=20, height=2, bg="dodgerblue", fg="white", 
                                font=("Helvetica", 12), command=lambda cmd=command, out_file=output_file: on_tool_click(tool_name, cmd, out_file))
        tool_button.pack(pady=10, padx=10)

    window.mainloop()

# Lancer l'interface graphique
if __name__ == "__main__":
    create_gui()
