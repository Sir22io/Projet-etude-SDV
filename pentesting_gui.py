import os
import subprocess
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QVBoxLayout,
                             QTextEdit, QLabel, QHBoxLayout, QMessageBox, QScrollArea, QSizePolicy)
from PyQt5.QtCore import Qt
import sys

RESULTS_DIR = "results"
LOG_FILE = "toolbox_log.txt"
os.makedirs(RESULTS_DIR, exist_ok=True)

# Fonction d'exécution de commande
def run_tool(command, output_file, output_widget):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        full_output_path = os.path.join(RESULTS_DIR, output_file)

        if result.returncode == 0:
            with open(full_output_path, "w") as f:
                f.write(result.stdout)
            output_widget.setPlainText(f"✅ {command}\n\n{result.stdout}")
        else:
            with open(full_output_path, "w") as f:
                f.write(result.stderr)
            output_widget.setPlainText(f"❌ {command}\n\n{result.stderr}")

    except Exception as e:
        QMessageBox.critical(None, "Erreur", f"Erreur lors de l'exécution : {e}")

# Interface PyQt5
def create_gui():
    app = QApplication(sys.argv)
    window = QWidget()
    window.setWindowTitle("CyberSecurity Toolbox - GUI (PyQt5)")
    window.setGeometry(100, 100, 1100, 700)

    main_layout = QHBoxLayout()
    left_layout = QVBoxLayout()
    right_layout = QVBoxLayout()

    label = QLabel("\u2728 Interface Graphique de la Toolbox - Outils Offensifs")
    label.setStyleSheet("font-size: 18px; font-weight: bold;")
    right_layout.addWidget(label)

    output_text = QTextEdit()
    output_text.setReadOnly(True)
    output_text.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
    right_layout.addWidget(output_text)

    tools = [
        ("Nmap", "nmap -sP 127.0.0.1", "nmap.txt"),
        ("Nikto", "nikto -h http://testphp.vulnweb.com", "nikto.txt"),
        ("Gobuster", "gobuster dir -u http://testphp.vulnweb.com -w /usr/share/wordlists/dirb/common.txt", "gobuster.txt"),
        ("SQLMap", "sqlmap -u http://testphp.vulnweb.com --batch", "sqlmap.txt"),
        ("WPScan", "wpscan --url http://testphp.vulnweb.com", "wpscan.txt"),
        ("Hydra", "hydra -l admin -P /usr/share/wordlists/rockyou.txt http://testphp.vulnweb.com http-get", "hydra.txt"),
        ("Commix", "commix -u http://testphp.vulnweb.com", "commix.txt"),
        ("BurpSuite", "burpsuite", "burpsuite.txt"),
        ("Arachni", "arachni http://testphp.vulnweb.com", "arachni.txt")
    ]

    for tool_name, command, output_file in tools:
        btn = QPushButton(tool_name)
        btn.setStyleSheet("background-color: midnightblue; color: white; padding: 10px; font-size: 14px;")
        btn.clicked.connect(lambda _, cmd=command, out=output_file: run_tool(cmd, out, output_text))
        left_layout.addWidget(btn)

    main_layout.addLayout(left_layout, 1)
    main_layout.addLayout(right_layout, 3)
    window.setLayout(main_layout)
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    create_gui()
